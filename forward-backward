import numpy as np

Pi=np.array([0.2,0.4,0.4])
A=np.array([[0.5,0.2,0.3],[0.3,0.5,0.2],[0.2,0.3,0.5]])
B=np.array([[0.5,0.5],[0.4,0.6],[0.7,0.3]])
obs=np.array([0,1,0])

def forward(obs,Pi,A,B):
    """
    前向算法
    """
    N=len(A)
    T=len(obs)
    alpha=np.zeros((T,N),np.float)

    #计算初始值
    for i in range(N):
        alpha[0][i]=Pi[i]*B[i][obs[0]]        

    #递推计算
    for t in range(1,T):
        for i in range(N):
            sum_val=0
            for j in range(N):
                sum_val+=alpha[t-1][j]*A[j][i]
            alpha[t][i]=sum_val*B[i][obs[t]]            

    #终止,求和                   
    return sum(alpha[T-1])
    
def backward(obs,Pi,A,B):
    """
    后向算法
    """
    N=len(A)
    T=len(obs)
    beta = np.zeros((T,N),np.float)

    #初始化
    for i in range(N):
        beta[T-1][i] =1
 
    #递推
    for t in range(T-2,-1,-1):
        for i in range(N):
            for j in range(N):
                beta[t][i] += A[i][j]*B[j][obs[t+1]]*beta[t+1][j]
                
    #终止,求和
    prob=0
    for i in range(N):
        prob+=beta[0][i]*Pi[i]*B[i][obs[0]]                      
    return prob
